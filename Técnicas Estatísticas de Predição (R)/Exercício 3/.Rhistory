#b)
modelo.null <- lm(formula = y ~ 1, data = amostra)
#leitura da base de dados
base <- read.csv2("selecao.csv", dec=".")
#a)
set.seed(09092003)
amostra = base[sample(nrow(base), 1000),]
setwd("C:/Users/gusta/Downloads/Exercício 3")
#leitura da base de dados
base <- read.csv2("selecao.csv", dec=".")
#a)
set.seed(09092003)
amostra = base[sample(nrow(base), 1000),]
#b)
modelo.null <- lm(formula = y ~ 1, data = amostra)
modelo.forward <- step(object = modelo.null,
scope = list(lower = ~1, upper = ~ .),
direction = "forward")
modelo.forward <- step(object = modelo.null,
scope = list(lower = ~1, upper = ~ x1 + x2 + x3 + x4 +
x5 + x6 + x7 + x8 + x9 + x10),
direction = "forward")
#c)
residuos <- residuals(modelo.forward)
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
qqnorm(residuos, main = "Gráfico Q-Q dos Resíduos")
qqline(residuos)
shapiro.test(residuos)
bptest(modelo.forward)
# Tentativa de ajustar o modelo com transformações e termo polinomial
# Verificar valores únicos em x10
valores_unicos_x10 <- unique(amostra$x10)
print(valores_unicos_x10)
## [1] 1 0
# Ajustar o modelo com base no número de valores únicos em x10
if (length(valores_unicos_x10) > 2) {
# x10 tem valores suficientes para um termo polinomial de grau 2
modelo_transformado2 <- lm(log(y) ~ x7 + x10 + log(x9) + poly(x10, 2) + x6 + x4 + x5 + x8,
data = amostra)
} else {
# x10 não tem valores suficientes, removendo o termo polinomial
modelo_transformado2 <- lm(log(y) ~ x7 + x10 + log(x9) + x6 + x4 + x5 + x8, data =
amostra)
}
# Gráfico de Resíduos do novo modelo
plot(fitted(modelo_transformado2), rstandard(modelo_transformado2))
abline(0, 0)
modelo.forward <- step(object = modelo.null,
scope = list(lower = ~1, upper = ~ x1 + x2 + x3 + x4 +
x5 + x6 + x7 + x8 + x9 + x10),
direction = "forward",
trace = 0)
#c)
residuos <- residuals(modelo.forward)
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
qqnorm(residuos, main = "Gráfico Q-Q dos Resíduos")
qqline(residuos)
valores_unicos_x10 <- unique(amostra$x10)
print(valores_unicos_x10)
if (length(valores_unicos_x10) > 2) {
modelo_transformado2 <- lm(log(y) ~ x7 + x10 + log(x9) + poly(x10, 2) + x6 + x4 + x5 + x8,
data = amostra)
} else {
modelo_transformado2 <- lm(log(y) ~ x7 + x10 + log(x9) + x6 + x4 + x5 + x8, data =
amostra)
}
# Gráfico de Resíduos do novo modelo
plot(fitted(modelo_transformado2), rstandard(modelo_transformado2))
qqnorm(residuos, main = "Gráfico Q-Q dos Resíduos")
qqline(residuos)
#c)
residuos <- residuals(modelo.forward)
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
valores_unicos_x10 <- unique(amostra$x10)
print(valores_unicos_x10)
if (length(valores_unicos_x10) > 2) {
modelo_transformado <- lm(log(y) ~ x7 + x10 + log(x9) + poly(x10, 2) + x6 + x4 + x5 + x8,
data = amostra)
} else {
modelo_transformado <- lm(log(y) ~ x7 + x10 + log(x9) + x6 + x4 + x5 + x8, data =
amostra)
}
plot(fitted(modelo_transformado), rstandard(modelo_transformado))
plot(modelo_transformado, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
plot(modelo_transformado, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
plot(fitted(modelo_transformado), rstandard(modelo_transformado))
abline(0, 0)
#leitura da base de dados
base <- read.csv2("selecao.csv", dec=".")
#a)
set.seed(09092003)
amostra = base[sample(nrow(base), 1000),]
#b)
modelo.null <- lm(formula = y ~ 1, data = amostra)
modelo.forward <- step(object = modelo.null,
scope = list(lower = ~1, upper = ~ x1 + x2 + x3 + x4 +
x5 + x6 + x7 + x8 + x9 + x10),
direction = "forward",
trace = 0)
#c)
residuos <- residuals(modelo.forward)
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
valores_unicos_x10 <- unique(amostra$x10)
print(valores_unicos_x10)
if (length(valores_unicos_x10) > 2) {
modelo_transformado <- lm(log(y) ~ x7 + x10 + log(x9) + poly(x10, 2) + x6 + x4 + x5 + x8,
data = amostra)
} else {
modelo_transformado <- lm(log(y) ~ x7 + x10 + log(x9) + x6 + x4 + x5 + x8, data =
amostra)
}
plot(fitted(modelo_transformado), rstandard(modelo_transformado))
abline(0, 0)
#leitura da base de dados
base <- read.csv2("selecao.csv", dec=".")
#a)
set.seed(09092003)
amostra = base[sample(nrow(base), 1000),]
#b)
modelo.null <- lm(formula = y ~ 1, data = amostra)
modelo.forward <- step(object = modelo.null,
scope = list(lower = ~1, upper = ~ x1 + x2 + x3 + x4 +
x5 + x6 + x7 + x8 + x9 + x10),
direction = "forward",
trace = 0)
#c)
residuos <- residuals(modelo.forward)
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
plot(residuos, main = "Gráfico de Resíduos", ylab = "Resíduos", xlab = "Índice")
valores_unicos_x10 <- unique(amostra$x10)
print(valores_unicos_x10)
if (length(valores_unicos_x10) > 2) {
modelo_transformado <- lm(log(y) ~ x7 + x10 + log(x9) + poly(x10, 2) + x6 + x4 + x5 + x8,
data = amostra)
} else {
modelo_transformado <- lm(log(y) ~ x7 + x10 + log(x9) + x6 + x4 + x5 + x8, data =
amostra)
}
plot(fitted(modelo_transformado), rstandard(modelo_transformado))
abline(0, 0)
print(valores_unicos_x10)
modelo_transformado <- lm(log(y) ~ x7 + x10 + log(x9) + x6 + x4 + x5 + x8, data =
amostra)
plot(fitted(modelo_transformado), rstandard(modelo_transformado))
abline(0, 0)
